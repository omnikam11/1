class Dijkstra{
    int V=9;
    void shortestPath(int graph[][], int src){
        int dist[]=new int[V];
        boolean incSet[]=new boolean[V];
        for(int i=0;i<V;i++){
            dist[i]=1000000;
            incSet[i]=false;
        }
        dist[src]=0;

        for (int j = 0; j < V-1; j++) {
            int u=minDist(dist, incSet);
            incSet[u]=true;
            for(int k=0;k<V;k++){
                if(graph[u][k]!=0 && incSet[k]==false ){
                    if(dist[u]+graph[u][k]<dist[k]){
                        dist[k]=dist[u]+graph[u][k];
                    }
                }
            }
        }

        printSolution(dist);


    }


    private int minDist(int[] dist, boolean[] incSet) {
        int min=1000000;
        int min_index=-1;
        for(int i=0;i<V;i++){
            if(incSet[i]==false && dist[i]<=min){
                min=dist[i];
                min_index=i;
            }
        }
        return min_index;
    }


    void printSolution(int dist[])
	{
		System.out.println("Vertex \t\t Distance from Source");
		for (int i = 0; i < V; i++)
			System.out.println(i + " \t\t " + dist[i]);
	}

}
public class Main {
    public static void main(String[] args) {
        int graph[][]=new int[][]{
            { 0, 3, 0, 0, 0, 0, 0, 9, 0 },
            { 3, 0, 8, 0, 0, 0, 0, 10, 0 },
            { 0, 8, 0, 7, 0, 4, 0, 0, 2 },
            { 0, 0, 7, 0, 9, 15, 0, 0, 0 },
            { 0, 0, 0, 9, 0, 10, 0, 0, 0 },
            { 0, 0, 4, 15, 10, 0, 2, 0, 0 },
            { 0, 0, 0, 0, 0, 2, 0, 3, 6 },
            { 9, 10, 0, 0, 0, 0, 3, 0, 7 },
            { 0, 0, 2, 0, 0, 0, 6, 7, 0 }
        };
        Dijkstra dj=new Dijkstra();
        dj.shortestPath(graph, 0);
    }
}
